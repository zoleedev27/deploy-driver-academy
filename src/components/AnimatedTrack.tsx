import {useEffect, useRef} from "react";

export default function AnimatedTrack() {
    const dotRef = useRef<SVGCircleElement>(null);
    const pathRef = useRef<SVGPathElement>(null);

    useEffect(() => {
        const dot = dotRef.current;
        const path = pathRef.current;
        if (!dot || !path) return;

        const path1 = "M614.37 340.643c-13.736-12.399-26.454-25.399-41.032-36.335-14.737-11.056-31.535-16.127-49.58-17.975-25.84-2.648-51.792-3.57-77.698-5.215-39.863-2.532-79.702-5.432-119.624-6.946-1.937-.073-3.88-.009-7.026-.009 3.48 3.6 6.789 4.887 10.239 5.901 56.375 16.573 112.753 33.137 169.13 49.701 10.06 2.956 20.083 6.05 30.192 8.83 25.773 7.087 39.644 24.391 41.889 50.499 3.433 39.924-25.44 69.66-56.72 74.587-11.795 1.858-23.19-.227-34.32-4.244-36.191-13.058-71.852-27.485-107.645-41.572-1.08-.425-2.188-.777-4.272-1.512 3.608 6.71 6.958 12.647 10.036 18.721 7.89 15.573 17.292 30.465 21.914 47.534 6.637 24.514 4.44 47.738-11.736 68.144-26.84 33.858-75.773 31.716-100.19-4.118-9.079-13.326-14.91-28.253-20.677-43.172-27.381-70.834-54.749-141.673-81.982-212.563-5.429-14.13-11.707-27.992-15.169-42.81-13.042-55.828 24.193-110.953 72.107-120.785a130 130 0 0 1 24.773-2.661c42.663-.471 85.309.863 127.957 1.505 23.156.35 46.321.13 69.467.852 39.635 1.236 79.28 1.574 118.927 2.12 28.308.39 56.608 1.493 84.923 1.883 30.983.425 61.97.91 92.939 1.884 18.332.577 36.588 2.32 53.215 11.344 20.268 11.002 32.316 28.804 40.824 49.46 7.323 17.777 9.929 36.313 10.383 55.56.603 25.608-3.042 50.25-13.63 73.465-17.062 37.412-43.963 64.604-84.497 75.829-30.432 8.427-59.794 3.215-87.968-9.809-23.294-10.767-42.597-27.182-61.206-44.476a546 546 0 0 0-3.943-3.617"
        const scale = 2;
        const offsetX = 100;
        const offsetY = 100;
        const orbitRadius = 20;
        const duration = 9000;

        const tempPath = path.cloneNode() as SVGPathElement;
        tempPath.setAttribute("d", path1);
        tempPath.setAttribute("transform", `translate(${offsetX}, ${offsetY}) scale(${scale})`);
        document.body.appendChild(tempPath);

        const pathLength = tempPath.getTotalLength();
        let startTime: number | null = null;

        const prevNormal = { x: 0, y: 0 };
        const smoothing = 0.2; // 0 to 1 (higher = more responsive, lower = smoother)

        const animate = (timestamp: number) => {
            if (startTime === null) startTime = timestamp;
            const deltaTime = timestamp - startTime;
            const t = (deltaTime % duration) / duration;

            const currentLength = t * pathLength;
            const point = tempPath.getPointAtLength(currentLength);
            const nextPoint = tempPath.getPointAtLength(currentLength + 1);

            const dx = nextPoint.x - point.x;
            const dy = nextPoint.y - point.y;
            const len = Math.hypot(dx, dy);

            let nx = -dy / len;
            let ny = dx / len;

            // LERP the normal vector to smooth direction change
            prevNormal.x = prevNormal.x * (1 - smoothing) + nx * smoothing;
            prevNormal.y = prevNormal.y * (1 - smoothing) + ny * smoothing;

            // Normalize again after lerp
            const nLen = Math.hypot(prevNormal.x, prevNormal.y);
            nx = prevNormal.x / nLen;
            ny = prevNormal.y / nLen;

            const orbitX = point.x + nx * orbitRadius;
            const orbitY = point.y + ny * orbitRadius;

            dot.setAttribute("cx", orbitX.toString());
            dot.setAttribute("cy", orbitY.toString());

            requestAnimationFrame(animate);
        };

        requestAnimationFrame(animate);

        return () => {
            document.body.removeChild(tempPath);
        };
    }, []);

    return (
        <div className="flex items-center justify-center bg-white min-h-screen">
            <svg
                style={{background: "black"}}
                xmlns="http://www.w3.org/2000/svg"
                width="1000px"
                height="1000px"
                viewBox="0 0 1000 1000"
            >
                <g transform="scale(0.5)">
                    <path
                        ref={pathRef}
                        d="M614.37 340.643c-13.736-12.399-26.454-25.399-41.032-36.335-14.737-11.056-31.535-16.127-49.58-17.975-25.84-2.648-51.792-3.57-77.698-5.215-39.863-2.532-79.702-5.432-119.624-6.946-1.937-.073-3.88-.009-7.026-.009 3.48 3.6 6.789 4.887 10.239 5.901 56.375 16.573 112.753 33.137 169.13 49.701 10.06 2.956 20.083 6.05 30.192 8.83 25.773 7.087 39.644 24.391 41.889 50.499 3.433 39.924-25.44 69.66-56.72 74.587-11.795 1.858-23.19-.227-34.32-4.244-36.191-13.058-71.852-27.485-107.645-41.572-1.08-.425-2.188-.777-4.272-1.512 3.608 6.71 6.958 12.647 10.036 18.721 7.89 15.573 17.292 30.465 21.914 47.534 6.637 24.514 4.44 47.738-11.736 68.144-26.84 33.858-75.773 31.716-100.19-4.118-9.079-13.326-14.91-28.253-20.677-43.172-27.381-70.834-54.749-141.673-81.982-212.563-5.429-14.13-11.707-27.992-15.169-42.81-13.042-55.828 24.193-110.953 72.107-120.785a130 130 0 0 1 24.773-2.661c42.663-.471 85.309.863 127.957 1.505 23.156.35 46.321.13 69.467.852 39.635 1.236 79.28 1.574 118.927 2.12 28.308.39 56.608 1.493 84.923 1.883 30.983.425 61.97.91 92.939 1.884 18.332.577 36.588 2.32 53.215 11.344 20.268 11.002 32.316 28.804 40.824 49.46 7.323 17.777 9.929 36.313 10.383 55.56.603 25.608-3.042 50.25-13.63 73.465-17.062 37.412-43.963 64.604-84.497 75.829-30.432 8.427-59.794 3.215-87.968-9.809-23.294-10.767-42.597-27.182-61.206-44.476a546 546 0 0 0-3.943-3.617
                    M304 168.835c36.976 1.327 73.483.273 109.956 1.273 28.992.795 57.982.241 86.969.727 43.81.735 87.621 1.392 131.431 2.152 33.646.583 67.296 1.087 100.933 2.028 10.947.306 21.919.586 32.833 2.398 25.849 4.291 42.902 19.206 50.23 43.69 11.006 36.769 6.309 71.682-17.918 102.43-22.138 28.096-57.205 37.429-91.272 25.415-22.162-7.815-40.27-21.77-57.493-37.222-17.504-15.703-33.08-33.373-50.544-49.108-20.49-18.462-44.695-26.957-72.102-27.328-47.644-.645-95.292-1.236-142.926-2.377-26.657-.638-53.314-.487-79.968-.923a81 81 0 0 0-7.992.247c-11.153.918-18.642 8.79-19.108 19.988-1.088 26.113 19.41 53.945 46.334 62.24 35.157 10.833 70.414 21.344 105.636 31.965 28.21 8.506 56.434 16.964 84.648 25.455 10.255 3.087 18.827 7.945 20.548 19.864 2.932 20.312-14.818 38.578-35.229 35.95-12.132-1.562-23.456-6.203-34.938-10.16-43.6-15.025-86.916-30.873-130.79-45.102a4 4 0 0 0-.482-.133c-4.106-.771-8.532-4.027-12.277-.311-4.143 4.11-1.727 9.202-.086 13.626 5.567 15.013 12.784 29.279 20.15 43.478 9.654 18.607 20.839 36.5 27.365 56.598 3.798 11.695 5.007 23.409-1.323 34.84-9.975 18.012-34.71 20.196-47.553 4.049-4.931-6.2-8.086-13.371-10.51-20.868-8.563-26.49-19.984-51.887-29.897-77.86-20.366-53.367-41.563-106.419-61.65-159.889-8.785-23.385-8.071-46.845 6.496-68.328 11.93-17.594 29.134-26.128 50.074-28.042 9.99-.913 19.968-.627 30.455-.762"

                        strokeWidth="10"
                        stroke="red"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        fill="none"
                    />
                    <circle
                        ref={dotRef}
                        r="8"
                        fill="cyan"
                        style={{ filter: 'drop-shadow(0 0 6px cyan)' }}

                    />
                </g>
            </svg>
        </div>
    );
}
